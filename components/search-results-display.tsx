"use client"

import type React from "react"
import { useState } from "react"
import type { WebsiteData } from "@/types/website-data"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import {
  Globe,
  Server,
  AlertTriangle,
  ChevronDown,
  ChevronUp,
  Copy,
  ExternalLink,
  Star,
  Gauge,
  Search,
  Code,
  Lock,
  Loader2,
} from "lucide-react"
import { format, parseISO } from "date-fns"
import { toast } from "@/components/ui/use-toast"
import Link from "next/link"

interface SearchResultsDisplayProps {
  results: WebsiteData | null
  isLoading: boolean
  error: string | null
}

interface AnalysisSection {
  id: string
  title: string
  icon: React.ReactNode
  items: Array<{
    label: string
    value: string | number | boolean | null | undefined
    type?: "text" | "number" | "boolean" | "score" | "url" | "array"
    unit?: string
    color?: "green" | "yellow" | "red" | "blue" | "purple"
  }>
}

const formatValue = (value: any, type?: string, unit?: string): string => {
  if (value === null || value === undefined || value === "") return "N/A"

  switch (type) {
    case "boolean":
      return value ? "✓ Yes" : "✗ No"
    case "score":
      return `${value}/100`
    case "number":
      return unit ? `${value.toLocaleString()} ${unit}` : value.toLocaleString()
    case "array":
      return Array.isArray(value) ? value.join(", ") : String(value)
    case "url":
      return value
    default:
      return String(value)
  }
}

const getScoreColor = (score: number): string => {
  if (score >= 80) return "text-green-600"
  if (score >= 60) return "text-yellow-600"
  return "text-red-600"
}

const ScoreIndicator: React.FC<{ score: number; label: string }> = ({ score, label }) => (
  <div className="flex items-center space-x-2">
    <div className={`text-2xl font-bold ${getScoreColor(score)}`}>{score}</div>
    <div className="text-sm text-muted-foreground">{label}</div>
  </div>
)

export const SearchResultsDisplay: React.FC<SearchResultsDisplayProps> = ({ results, isLoading, error }) => {
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set())
  const [copySuccess, setCopySuccess] = useState(false)

  const toggleSection = (sectionId: string) => {
    const newExpanded = new Set(expandedSections)
    if (newExpanded.has(sectionId)) {
      newExpanded.delete(sectionId)
    } else {
      newExpanded.add(sectionId)
    }
    setExpandedSections(newExpanded)
  }

  const copyResults = async () => {
    if (!results) return

    const formattedResults = `
WSfynder Analysis Results
========================

Website: ${results.url}
Title: ${results.metadata?.title || "N/A"}
Description: ${results.metadata?.description || "N/A"}
Analysis Date: ${results.analysisDate ? format(parseISO(results.analysisDate), "PPP p") : "N/A"}

Performance Scores:
- Performance: ${results.performance?.lighthouseScore?.performance || 0}/100
- SEO: ${results.performance?.lighthouseScore?.seo || 0}/100
- Accessibility: ${results.performance?.lighthouseScore?.accessibility || 0}/100
- Best Practices: ${results.performance?.lighthouseScore?.bestPractices || 0}/100

Security:
- HTTPS Enabled: ${results.security?.httpsEnabled ? "Yes" : "No"}
- SSL Issuer: ${results.security?.sslIssuer || "N/A"}

Hosting:
- Provider: ${results.hosting?.provider || "N/A"}
- IP Address: ${results.hosting?.ipAddress || "N/A"}
- Location: ${results.hosting?.location || "N/A"}

Content Analysis:
- Word Count: ${results.contentAnalysis?.wordCount || 0}
- Images: ${results.contentAnalysis?.imagesCount || 0}
- Videos: ${results.contentAnalysis?.videosCount || 0}

Technologies:
${results.technologies?.map((tech) => `- ${tech.name} (${tech.category})`).join("\n") || "None detected"}

Generated by WSfynder - Intelligent Website Analysis Platform
Visit: https://wsfynder.vercel.app
    `.trim()

    try {
      await navigator.clipboard.writeText(formattedResults)
      setCopySuccess(true)
      toast({
        title: "Results Copied!",
        description: "Analysis results have been copied to your clipboard in formatted text.",
      })
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy results. Please try again.",
        variant: "destructive",
      })
    }
  }

  if (isLoading) {
    return (
      <div className="max-w-4xl mx-auto mt-8">
        <Card className="border-0 shadow-sm">
          <CardContent className="flex items-center justify-center py-16">
            <div className="text-center space-y-4">
              <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
              <div className="space-y-2">
                <h3 className="text-lg font-medium">Analyzing website...</h3>
                <p className="text-sm text-muted-foreground">
                  Our AI is performing comprehensive analysis including performance, security, and content evaluation.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (error) {
    return (
      <div className="max-w-4xl mx-auto mt-8">
        <Card className="border-red-200 bg-red-50">
          <CardContent className="py-8">
            <div className="text-center space-y-4">
              <AlertTriangle className="h-12 w-12 text-red-500 mx-auto" />
              <div>
                <h3 className="text-lg font-semibold text-red-900">Analysis Failed</h3>
                <p className="text-red-700 mt-2">{error}</p>
                <p className="text-sm text-red-600 mt-2">
                  Please check the URL and try again. The website might be inaccessible or blocking automated analysis.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (!results) return null

  const { url, metadata, hosting, performance, security, contentAnalysis, technologies, links } = results

  const analysisData: AnalysisSection[] = [
    {
      id: "performance",
      title: "Performance Analysis",
      icon: <Gauge className="h-5 w-5" />,
      items: [
        { label: "Performance Score", value: performance?.lighthouseScore?.performance, type: "score" },
        { label: "Page Size", value: performance?.pageSize, type: "number", unit: "KB" },
        { label: "HTTP Requests", value: performance?.httpRequests, type: "number" },
        { label: "Load Time", value: performance?.loadTime, type: "number", unit: "ms" },
        { label: "Compression Enabled", value: performance?.compressionEnabled, type: "boolean" },
        { label: "Caching Enabled", value: performance?.cachingEnabled, type: "boolean" },
      ],
    },
    {
      id: "seo",
      title: "SEO & Content",
      icon: <Search className="h-5 w-5" />,
      items: [
        { label: "SEO Score", value: performance?.lighthouseScore?.seo, type: "score" },
        { label: "Word Count", value: contentAnalysis?.wordCount, type: "number" },
        { label: "Images Count", value: contentAnalysis?.imagesCount, type: "number" },
        { label: "Missing Alt Text", value: contentAnalysis?.imagesMissingAlt, type: "number" },
        { label: "Internal Links", value: links?.internalLinks, type: "number" },
        { label: "External Links", value: links?.externalLinks, type: "number" },
      ],
    },
    {
      id: "security",
      title: "Security & Privacy",
      icon: <Lock className="h-5 w-5" />,
      items: [
        { label: "HTTPS Enabled", value: security?.httpsEnabled, type: "boolean" },
        { label: "SSL Issuer", value: security?.sslIssuer, type: "text" },
        { label: "TLS Version", value: security?.tlsVersion, type: "text" },
        { label: "Mixed Content", value: security?.mixedContent, type: "boolean" },
        {
          label: "Security Headers",
          value: security?.httpHeaders ? Object.keys(security.httpHeaders).length : 0,
          type: "number",
        },
      ],
    },
    {
      id: "hosting",
      title: "Hosting & Infrastructure",
      icon: <Server className="h-5 w-5" />,
      items: [
        { label: "Hosting Provider", value: hosting?.provider, type: "text" },
        { label: "IP Address", value: hosting?.ipAddress, type: "text" },
        { label: "Server Location", value: hosting?.location, type: "text" },
        { label: "Response Time", value: hosting?.responseTime, type: "number", unit: "ms" },
        { label: "Server Type", value: hosting?.serverType, type: "text" },
      ],
    },
    {
      id: "technologies",
      title: "Technologies Detected",
      icon: <Code className="h-5 w-5" />,
      items:
        technologies?.map((tech) => ({
          label: tech.name,
          value: `${tech.category}${tech.version ? ` v${tech.version}` : ""}`,
          type: "text" as const,
        })) || [],
    },
  ]

  return (
    <div className="max-w-4xl mx-auto mt-8 space-y-6">
      {/* Google-style main result */}
      <Card className="border-0 shadow-sm hover:shadow-md transition-shadow">
        <CardContent className="p-6">
          {/* Header with favicon and title */}
          <div className="flex items-start space-x-4 mb-4">
            <div className="flex-shrink-0">
              {metadata?.favicon ? (
                <img
                  src={metadata.favicon || "/placeholder.svg"}
                  alt="Website favicon"
                  className="w-8 h-8 rounded-sm"
                  onError={(e) => {
                    e.currentTarget.style.display = "none"
                  }}
                />
              ) : (
                <Globe className="w-8 h-8 text-muted-foreground" />
              )}
            </div>
            <div className="flex-1 min-w-0">
              <div className="flex items-center space-x-2 mb-1">
                <h1 className="text-2xl font-normal text-blue-600 hover:underline cursor-pointer">
                  <Link href={url} target="_blank" rel="noopener noreferrer">
                    {metadata?.title || "Website Analysis"}
                  </Link>
                </h1>
                <ExternalLink className="h-4 w-4 text-muted-foreground" />
              </div>
              <div className="text-sm text-green-700 mb-2">{url}</div>
              {metadata?.description && (
                <p className="text-sm text-muted-foreground leading-relaxed">{metadata.description}</p>
              )}
            </div>
            <Button variant="outline" size="sm" onClick={copyResults} className="flex items-center space-x-2">
              <Copy className="h-4 w-4" />
              <span>{copySuccess ? "Copied!" : "Copy Results"}</span>
            </Button>
          </div>

          {/* Keywords */}
          {metadata?.keywords && metadata.keywords.length > 0 && (
            <div className="mb-4">
              <div className="flex flex-wrap gap-2">
                {metadata.keywords.slice(0, 8).map((keyword: string, index: number) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {keyword}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Quick scores */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 p-4 bg-gray-50 rounded-lg">
            <ScoreIndicator score={performance?.lighthouseScore?.performance || 0} label="Performance" />
            <ScoreIndicator score={performance?.lighthouseScore?.seo || 0} label="SEO" />
            <ScoreIndicator score={performance?.lighthouseScore?.accessibility || 0} label="Accessibility" />
            <ScoreIndicator score={performance?.lighthouseScore?.bestPractices || 0} label="Best Practices" />
          </div>

          {/* Action buttons */}
          <div className="flex flex-wrap gap-2">
            <Button asChild size="sm">
              <Link href="/content-studio">
                <Star className="h-4 w-4 mr-2" />
                Generate Content
              </Link>
            </Button>
            <Button variant="outline" size="sm" asChild>
              <Link href="/hosting">
                <Server className="h-4 w-4 mr-2" />
                Hosting Details
              </Link>
            </Button>
            <Button variant="outline" size="sm" asChild>
              <Link href={url} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="h-4 w-4 mr-2" />
                Visit Site
              </Link>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Detailed analysis sections */}
      <div className="space-y-4">
        {analysisData.map((section) => (
          <Card key={section.id} className="border-0 shadow-sm">
            <Collapsible open={expandedSections.has(section.id)} onOpenChange={() => toggleSection(section.id)}>
              <CollapsibleTrigger asChild>
                <CardHeader className="cursor-pointer hover:bg-gray-50 transition-colors">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center space-x-3 text-lg">
                      {section.icon}
                      <span>{section.title}</span>
                    </CardTitle>
                    {expandedSections.has(section.id) ? (
                      <ChevronUp className="h-5 w-5 text-muted-foreground" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-muted-foreground" />
                    )}
                  </div>
                </CardHeader>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <CardContent className="pt-0">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {section.items.map((item, index) => (
                      <div
                        key={index}
                        className="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0"
                      >
                        <span className="text-sm font-medium text-muted-foreground">{item.label}</span>
                        <span
                          className={`text-sm font-medium ${
                            item.type === "score" && typeof item.value === "number"
                              ? getScoreColor(item.value)
                              : item.type === "boolean"
                                ? item.value
                                  ? "text-green-600"
                                  : "text-red-600"
                                : "text-foreground"
                          }`}
                        >
                          {formatValue(item.value, item.type, item.unit)}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </CollapsibleContent>
            </Collapsible>
          </Card>
        ))}
      </div>

      {/* Footer */}
      <div className="text-center py-4">
        <p className="text-xs text-muted-foreground">
          Analysis powered by WSfynder • {results.analysisDate && format(parseISO(results.analysisDate), "PPP p")}
        </p>
      </div>
    </div>
  )
}
