"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import {
  Globe,
  Shield,
  Zap,
  Search,
  ExternalLink,
  Copy,
  ChevronDown,
  ChevronUp,
  Server,
  Code,
  Eye,
  TreePine,
  FileText,
  CheckCircle,
  AlertTriangle,
  XCircle,
  Recycle,
} from "lucide-react"
import { toast } from "@/components/ui/use-toast"
import type { WebsiteData } from "@/types/website-data"

interface SearchResultsDisplayProps {
  data: WebsiteData
  isLoading: boolean
  isError: boolean
}

export function SearchResultsDisplay({ data, isLoading, isError }: SearchResultsDisplayProps) {
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({})

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }))
  }

  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-green-600"
    if (score >= 60) return "text-yellow-600"
    return "text-red-600"
  }

  const getScoreIcon = (score: number) => {
    if (score >= 80) return <CheckCircle className="h-4 w-4 text-green-600" />
    if (score >= 60) return <AlertTriangle className="h-4 w-4 text-yellow-600" />
    return <XCircle className="h-4 w-4 text-red-600" />
  }

  const calculateSustainabilityMetrics = (data: WebsiteData) => {
    // Calculate based on page size and carbon footprint
    const pageSizeKB = data.performance?.pageSize || 0
    const carbonFootprint = data.metrics?.carbonFootprint || 0

    // Estimates: 1 page view = ~4.6g CO2, 1 sheet of paper = ~5g CO2
    // Average tree absorbs ~22kg CO2 per year
    const annualPageViews = 10000 // Estimated annual page views
    const totalCarbonKg = (carbonFootprint * annualPageViews) / 1000
    const paperSheetsSaved = Math.round(totalCarbonKg * 200) // Rough conversion
    const treesSaved = (totalCarbonKg / 22).toFixed(2)

    return {
      paperSheetsSaved,
      treesSaved: Number.parseFloat(treesSaved),
      carbonSavedKg: totalCarbonKg.toFixed(2),
    }
  }

  const copyResults = async () => {
    if (!data) return

    const sustainability = calculateSustainabilityMetrics(data)

    const formattedResults = `
üåê WSfynder Analysis Results
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä WEBSITE OVERVIEW
‚Ä¢ URL: ${data.url}
‚Ä¢ Title: ${data.title || "No title found"}
‚Ä¢ Description: ${data.summary || "No description available"}

üéØ PERFORMANCE SCORES
‚Ä¢ Performance: ${data.performance_score || 0}/100
‚Ä¢ SEO: ${data.seoAnalysis?.seoScore || 0}/100
‚Ä¢ Accessibility: ${data.accessibility?.accessibilityScore || 0}/100
‚Ä¢ Security: ${data.security?.securityScore || 0}/100

üå± SUSTAINABILITY IMPACT
‚Ä¢ Paper Sheets Saved Annually: ${sustainability.paperSheetsSaved.toLocaleString()}
‚Ä¢ Trees Saved Annually: ${sustainability.treesSaved}
‚Ä¢ Carbon Footprint: ${data.metrics?.carbonFootprint || 0}g CO2
‚Ä¢ Carbon Saved: ${sustainability.carbonSavedKg}kg CO2/year

üìà TECHNICAL DETAILS
‚Ä¢ Page Size: ${data.performance?.pageSize || 0}KB
‚Ä¢ Load Time: ${data.performance?.loadTime || "N/A"}ms
‚Ä¢ Images: ${data.contentAnalysis?.imagesCount || 0}
‚Ä¢ Word Count: ${data.contentAnalysis?.wordCount || 0}

üîí SECURITY & HOSTING
‚Ä¢ HTTPS: ${data.security?.httpsEnabled ? "‚úÖ Enabled" : "‚ùå Disabled"}
‚Ä¢ Hosting: ${data.hosting?.provider || "Unknown"}
‚Ä¢ IP Address: ${data.hosting?.ipAddress || "Unknown"}

üõ†Ô∏è TECHNOLOGIES
${
  data.technologies
    ?.slice(0, 5)
    .map((tech) => `‚Ä¢ ${tech.name} (${tech.category})`)
    .join("\n") || "‚Ä¢ No technologies detected"
}

üìù TOP IMPROVEMENTS
${
  data.improvements
    ?.slice(0, 5)
    .map((imp) => `‚Ä¢ ${imp}`)
    .join("\n") || "‚Ä¢ No improvements suggested"
}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Generated by WSfynder - Intelligent Website Discovery
${new Date().toLocaleString()}
    `.trim()

    try {
      await navigator.clipboard.writeText(formattedResults)
      toast({
        title: "Results Copied!",
        description: "Analysis results have been copied to your clipboard in a structured format.",
      })
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard. Please try again.",
        variant: "destructive",
      })
    }
  }

  if (isLoading || isError || !data) {
    return null
  }

  const sustainability = calculateSustainabilityMetrics(data)

  return (
    <div className="space-y-6 max-w-6xl mx-auto">
      {/* Main Result Card - Google Style */}
      <Card className="border-0 shadow-lg bg-gradient-to-r from-white to-blue-50">
        <CardContent className="p-8">
          <div className="flex items-start gap-4">
            {/* Favicon */}
            <div className="flex-shrink-0">
              {data.metadata?.favicon ? (
                <img
                  src={data.metadata.favicon || "/placeholder.svg"}
                  alt="Website favicon"
                  className="w-8 h-8 rounded"
                  onError={(e) => {
                    e.currentTarget.style.display = "none"
                  }}
                />
              ) : (
                <div className="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
                  <Globe className="h-4 w-4 text-blue-600" />
                </div>
              )}
            </div>

            <div className="flex-1 min-w-0">
              {/* Title - Google Style */}
              <h2 className="text-2xl font-normal text-blue-600 hover:text-blue-800 cursor-pointer mb-1 truncate">
                {data.title || new URL(data.url).hostname}
              </h2>

              {/* URL - Google Style */}
              <div className="flex items-center gap-2 mb-3">
                <span className="text-green-700 text-sm">{data.url}</span>
                <Button variant="ghost" size="sm" asChild className="h-6 w-6 p-0">
                  <a href={data.url} target="_blank" rel="noopener noreferrer">
                    <ExternalLink className="h-3 w-3" />
                  </a>
                </Button>
              </div>

              {/* Description */}
              <p className="text-gray-700 text-sm leading-relaxed mb-4">
                {data.summary || data.metadata?.description || "No description available for this website."}
              </p>

              {/* Quick Scores */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                <div className="text-center">
                  <div className={`text-2xl font-bold ${getScoreColor(data.performance_score || 0)}`}>
                    {data.performance_score || 0}
                  </div>
                  <div className="text-xs text-gray-500">Performance</div>
                </div>
                <div className="text-center">
                  <div className={`text-2xl font-bold ${getScoreColor(data.seoAnalysis?.seoScore || 0)}`}>
                    {data.seoAnalysis?.seoScore || 0}
                  </div>
                  <div className="text-xs text-gray-500">SEO</div>
                </div>
                <div className="text-center">
                  <div className={`text-2xl font-bold ${getScoreColor(data.accessibility?.accessibilityScore || 0)}`}>
                    {data.accessibility?.accessibilityScore || 0}
                  </div>
                  <div className="text-xs text-gray-500">Accessibility</div>
                </div>
                <div className="text-center">
                  <div className={`text-2xl font-bold ${getScoreColor(data.security?.securityScore || 0)}`}>
                    {data.security?.securityScore || 0}
                  </div>
                  <div className="text-xs text-gray-500">Security</div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-wrap gap-2">
                <Button variant="outline" size="sm" onClick={copyResults}>
                  <Copy className="h-4 w-4 mr-2" />
                  Copy Results
                </Button>
                <Button variant="outline" size="sm" asChild>
                  <a href={data.url} target="_blank" rel="noopener noreferrer">
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Visit Site
                  </a>
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Sustainability Impact Card */}
      <Card className="border-green-200 bg-gradient-to-r from-green-50 to-emerald-50">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-green-800">
            <TreePine className="h-5 w-5" />
            Environmental Impact
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <FileText className="h-8 w-8 text-green-600" />
              </div>
              <div className="text-2xl font-bold text-green-700">
                {sustainability.paperSheetsSaved.toLocaleString()}
              </div>
              <div className="text-sm text-green-600">Paper Sheets Saved Annually</div>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <TreePine className="h-8 w-8 text-green-600" />
              </div>
              <div className="text-2xl font-bold text-green-700">{sustainability.treesSaved}</div>
              <div className="text-sm text-green-600">Trees Saved Annually</div>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center mb-2">
                <Recycle className="h-8 w-8 text-green-600" />
              </div>
              <div className="text-2xl font-bold text-green-700">{sustainability.carbonSavedKg}kg</div>
              <div className="text-sm text-green-600">CO‚ÇÇ Saved Annually</div>
            </div>
          </div>
          <div className="mt-4 p-3 bg-green-100 rounded-lg">
            <p className="text-sm text-green-800 text-center">
              üå± This website's optimized design helps save approximately{" "}
              <strong>{sustainability.treesSaved} trees</strong> worth of carbon absorption annually through reduced
              digital carbon footprint.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Analysis Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Performance Analysis */}
        <Card>
          <Collapsible open={expandedSections.performance} onOpenChange={() => toggleSection("performance")}>
            <CollapsibleTrigger asChild>
              <CardHeader className="cursor-pointer hover:bg-gray-50 transition-colors">
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Zap className="h-5 w-5 text-orange-500" />
                    Performance Analysis
                  </div>
                  {expandedSections.performance ? (
                    <ChevronUp className="h-4 w-4" />
                  ) : (
                    <ChevronDown className="h-4 w-4" />
                  )}
                </CardTitle>
                <CardDescription>Speed, optimization, and technical performance metrics</CardDescription>
              </CardHeader>
            </CollapsibleTrigger>
            <CollapsibleContent>
              <CardContent className="pt-0">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Overall Score</span>
                    <div className="flex items-center gap-2">
                      {getScoreIcon(data.performance_score || 0)}
                      <span className={`font-bold ${getScoreColor(data.performance_score || 0)}`}>
                        {data.performance_score || 0}/100
                      </span>
                    </div>
                  </div>
                  <Progress value={data.performance_score || 0} className="h-2" />

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Page Size:</span>
                      <span className="ml-2 font-medium">{data.performance?.pageSize || 0}KB</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Load Time:</span>
                      <span className="ml-2 font-medium">{data.performance?.loadTime || "N/A"}ms</span>
                    </div>
                    <div>
                      <span className="text-gray-500">HTTP Requests:</span>
                      <span className="ml-2 font-medium">{data.performance?.httpRequests || 0}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Compression:</span>
                      <span className="ml-2 font-medium">
                        {data.performance?.compressionEnabled ? "‚úÖ Enabled" : "‚ùå Disabled"}
                      </span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </CollapsibleContent>
          </Collapsible>
        </Card>

        {/* SEO & Content Analysis */}
        <Card>
          <Collapsible open={expandedSections.seo} onOpenChange={() => toggleSection("seo")}>
            <CollapsibleTrigger asChild>
              <CardHeader className="cursor-pointer hover:bg-gray-50 transition-colors">
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Search className="h-5 w-5 text-blue-500" />
                    SEO & Content
                  </div>
                  {expandedSections.seo ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                </CardTitle>
                <CardDescription>Search optimization and content structure analysis</CardDescription>
              </CardHeader>
            </CollapsibleTrigger>
            <CollapsibleContent>
              <CardContent className="pt-0">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">SEO Score</span>
                    <div className="flex items-center gap-2">
                      {getScoreIcon(data.seoAnalysis?.seoScore || 0)}
                      <span className={`font-bold ${getScoreColor(data.seoAnalysis?.seoScore || 0)}`}>
                        {data.seoAnalysis?.seoScore || 0}/100
                      </span>
                    </div>
                  </div>
                  <Progress value={data.seoAnalysis?.seoScore || 0} className="h-2" />

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-500">Word Count:</span>
                      <span className="ml-2 font-medium">{data.contentAnalysis?.wordCount || 0}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Images:</span>
                      <span className="ml-2 font-medium">{data.contentAnalysis?.imagesCount || 0}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">H1 Tags:</span>
                      <span className="ml-2 font-medium">{data.seoAnalysis?.h1Count || 0}</span>
                    </div>
                    <div>
                      <span className="text-gray-500">Internal Links:</span>
                      <span className="ml-2 font-medium">{data.links?.internalLinks || 0}</span>
                    </div>
                  </div>

                  {data.keywords && data.keywords.length > 0 && (
                    <div>
                      <span className="text-sm font-medium text-gray-700">Keywords:</span>
                      <div className="flex flex-wrap gap-1 mt-2">
                        {data.keywords.slice(0, 6).map((keyword, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {keyword}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </CollapsibleContent>
          </Collapsible>
        </Card>

        {/* Security Analysis */}
        <Card>
          <Collapsible open={expandedSections.security} onOpenChange={() => toggleSection("security")}>
            <CollapsibleTrigger asChild>
              <CardHeader className="cursor-pointer hover:bg-gray-50 transition-colors">
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Shield className="h-5 w-5 text-green-500" />
                    Security & Privacy
                  </div>
                  {expandedSections.security ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                </CardTitle>
                <CardDescription>Security headers, SSL, and privacy protection</CardDescription>
              </CardHeader>
            </CollapsibleTrigger>
            <CollapsibleContent>
              <CardContent className="pt-0">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Security Score</span>
                    <div className="flex items-center gap-2">
                      {getScoreIcon(data.security?.securityScore || 0)}
                      <span className={`font-bold ${getScoreColor(data.security?.securityScore || 0)}`}>
                        {data.security?.securityScore || 0}/100
                      </span>
                    </div>
                  </div>
                  <Progress value={data.security?.securityScore || 0} className="h-2" />

                  <div className="space-y-2 text-sm">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-500">HTTPS:</span>
                      <span
                        className={`font-medium ${data.security?.httpsEnabled ? "text-green-600" : "text-red-600"}`}
                      >
                        {data.security?.httpsEnabled ? "‚úÖ Enabled" : "‚ùå Disabled"}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-500">Mixed Content:</span>
                      <span
                        className={`font-medium ${!data.security?.mixedContent ? "text-green-600" : "text-red-600"}`}
                      >
                        {!data.security?.mixedContent ? "‚úÖ Clean" : "‚ùå Detected"}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-500">Security Headers:</span>
                      <span className="font-medium">
                        {data.security?.httpHeaders ? Object.keys(data.security.httpHeaders).length : 0} found
                      </span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </CollapsibleContent>
          </Collapsible>
        </Card>

        {/* Hosting & Infrastructure */}
        <Card>
          <Collapsible open={expandedSections.hosting} onOpenChange={() => toggleSection("hosting")}>
            <CollapsibleTrigger asChild>
              <CardHeader className="cursor-pointer hover:bg-gray-50 transition-colors">
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Server className="h-5 w-5 text-purple-500" />
                    Hosting & Infrastructure
                  </div>
                  {expandedSections.hosting ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                </CardTitle>
                <CardDescription>Server details, hosting provider, and infrastructure</CardDescription>
              </CardHeader>
            </CollapsibleTrigger>
            <CollapsibleContent>
              <CardContent className="pt-0">
                <div className="space-y-3 text-sm">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-500">Provider:</span>
                    <span className="font-medium">{data.hosting?.provider || "Unknown"}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-500">IP Address:</span>
                    <span className="font-medium font-mono text-xs">{data.hosting?.ipAddress || "Unknown"}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-500">Response Time:</span>
                    <span className="font-medium">{data.hosting?.responseTime || "N/A"}ms</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-500">Location:</span>
                    <span className="font-medium">{data.hosting?.location || "Unknown"}</span>
                  </div>
                </div>
              </CardContent>
            </CollapsibleContent>
          </Collapsible>
        </Card>
      </div>

      {/* Technologies & Improvements */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Technologies */}
        {data.technologies && data.technologies.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code className="h-5 w-5 text-indigo-500" />
                Technologies Detected
              </CardTitle>
              <CardDescription>Frameworks, libraries, and tools powering this website</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {data.technologies.slice(0, 8).map((tech, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <div>
                      <span className="font-medium">{tech.name}</span>
                      {tech.version && <span className="text-gray-500 text-sm ml-2">v{tech.version}</span>}
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {tech.category}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Improvements */}
        {data.improvements && data.improvements.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5 text-amber-500" />
                Recommended Improvements
              </CardTitle>
              <CardDescription>Actionable suggestions to enhance website performance</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {data.improvements.slice(0, 6).map((improvement, index) => (
                  <div key={index} className="flex items-start gap-3">
                    <div className="w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-sm text-gray-700 leading-relaxed">{improvement}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
