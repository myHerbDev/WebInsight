import { NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"
import { generateText } from "ai"
import { groq } from "@ai-sdk/groq"

const sql = neon(process.env.DATABASE_URL!)

export async function POST(request: Request) {
  try {
    const { analysisId, contentType, tone, intention } = await request.json()

    if (!contentType) {
      return NextResponse.json({ error: "Content type is required" }, { status: 400 })
    }

    console.log(`Generating ${contentType} content for analysis ${analysisId}`)

    // Get analysis data from database
    let analysis = null
    if (analysisId) {
      try {
        const result = await sql`
          SELECT * FROM website_analyzer.analyses 
          WHERE id = ${analysisId}
        `
        if (result.length > 0) {
          analysis = result[0]
        }
      } catch (dbError) {
        console.error("Database error:", dbError)
      }
    }

    // Use fallback if no analysis found
    if (!analysis) {
      analysis = {
        title: "Website Analysis",
        url: "example.com",
        summary: "Comprehensive website analysis",
        key_points: ["Performance analysis", "Content evaluation", "SEO assessment"],
        keywords: ["website", "analysis", "performance"],
        sustainability_score: 75,
        performance_score: 70,
        seo_score: 72,
        security_score: 68,
        improvements: ["Optimize loading speed", "Improve content structure"],
        content_stats: { word_count: 1200, paragraphs_count: 15 },
      }
    }

    let content = ""

    // Generate content with AI or fallback
    try {
      if (process.env.GROQ_API_KEY) {
        const prompt = createContentPrompt(analysis, contentType, tone || "professional", intention || "inform")

        const { text } = await generateText({
          model: groq("llama3-70b-8192"),
          prompt,
          maxTokens: 2000,
          temperature: 0.7,
        })

        content = text
      } else {
        content = getFallbackContent(contentType, analysis, tone || "professional")
      }
    } catch (aiError) {
      console.error("AI generation error:", aiError)
      content = getFallbackContent(contentType, analysis, tone || "professional")
    }

    // Save to database if possible
    try {
      if (analysisId) {
        await sql`
          INSERT INTO website_analyzer.generated_content 
          (analysis_id, content_type, tone, content, created_at)
          VALUES (${analysisId}, ${contentType}, ${tone || "professional"}, ${content}, NOW())
        `
      }
    } catch (saveError) {
      console.error("Error saving content:", saveError)
    }

    return NextResponse.json({
      content,
      success: true,
      message: "Content generated successfully",
    })
  } catch (error) {
    console.error("Error generating content:", error)
    return NextResponse.json(
      {
        content: "# Error Generating Content\n\nThere was an error generating the requested content. Please try again.",
        error: "Failed to generate content",
      },
      { status: 500 },
    )
  }
}

function createContentPrompt(analysis: any, contentType: string, tone: string, intention: string): string {
  const keyPoints = Array.isArray(analysis.key_points) ? analysis.key_points : []
  const keywords = Array.isArray(analysis.keywords) ? analysis.keywords : []

  return `Create a ${contentType} about ${analysis.title} with a ${tone} tone for ${intention} purpose.

Website: ${analysis.title}
URL: ${analysis.url}
Summary: ${analysis.summary}

Key Points:
${keyPoints.map((point: string, i: number) => `${i + 1}. ${point}`).join("\n")}

Keywords: ${keywords.join(", ")}

Performance Scores:
- Performance: ${analysis.performance_score}%
- SEO: ${analysis.seo_score}%
- Security: ${analysis.security_score}%

Create comprehensive, valuable content that incorporates these insights.`
}

function getFallbackContent(contentType: string, analysis: any, tone: string): string {
  const templates = {
    blog_post: `# ${analysis.title}: A Comprehensive Analysis

## Overview
${analysis.summary || "This website demonstrates strong potential with several optimization opportunities."}

## Key Findings
Our analysis of ${analysis.title} reveals important insights about its performance and structure.

## Performance Insights
- Performance Score: ${analysis.performance_score || 70}%
- SEO Score: ${analysis.seo_score || 72}%
- Security Score: ${analysis.security_score || 68}%

## Recommendations
Based on our analysis, we recommend focusing on performance optimization and content enhancement.

---
*Analysis generated by WSfynder*`,

    research_report: `# Research Report: ${analysis.title}

## Executive Summary
This report provides a comprehensive analysis of ${analysis.title}, examining its digital presence and performance metrics.

## Methodology
Our analysis employed advanced scanning techniques to evaluate multiple aspects of the website.

## Findings
The website demonstrates ${analysis.performance_score > 70 ? "strong" : "moderate"} performance with opportunities for improvement.

## Conclusions
${analysis.title} shows potential for optimization in key areas including performance and user experience.

---
*Report generated by WSfynder Analytics*`,

    case_study: `# Case Study: ${analysis.title}

## Background
${analysis.title} represents an interesting case study in modern web development and optimization.

## Challenge
The primary challenge was to analyze and understand the website's performance characteristics.

## Solution
Through comprehensive analysis, we identified key areas for improvement and optimization.

## Results
Our analysis revealed actionable insights for enhancing the website's performance and user experience.

---
*Case study by WSfynder Research Team*`,
  }

  return templates[contentType as keyof typeof templates] || templates.blog_post
}
