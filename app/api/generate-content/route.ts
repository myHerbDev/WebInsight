import { NextResponse } from "next/server"
import { Configuration, OpenAIApi } from "openai"

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
})
const openai = new OpenAIApi(configuration)

export async function POST(req: Request) {
  try {
    const { contentType, topic, analysisId } = await req.json()

    if (!contentType || !topic || !analysisId) {
      return new NextResponse("Missing parameters", { status: 400 })
    }

    console.log(`WSfynder generating ${contentType} content for analysis ${analysisId}`)

    let prompt = ""

    switch (contentType) {
      case "blogPost":
        prompt = `Write a blog post about ${topic}. The blog post should be informative and engaging. Include a call to action at the end.`
        break
      case "socialMediaPost":
        prompt = `Write a social media post about ${topic}. The post should be concise and attention-grabbing. Include relevant hashtags.`
        break
      case "emailNewsletter":
        prompt = `Write an email newsletter about ${topic}. The newsletter should be informative and engaging. Include a call to action at the end.`
        break
      case "websiteCopy":
        prompt = `Write website copy about ${topic}. The copy should be clear, concise, and persuasive. Focus on the benefits for the user.`
        break
      default:
        return new NextResponse("Invalid content type", { status: 400 })
    }

    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: prompt,
      max_tokens: 2048,
      temperature: 0.7,
    })

    let content = completion.data.choices[0].text?.trim() || ""

    // Add a footer to the generated content
    content += `\n\n--- \nGenerated by WSfynder`

    return NextResponse.json({ content })
  } catch (error) {
    console.error("[CONTENT_GENERATION_ERROR]", error)
    return new NextResponse("Internal Error", { status: 500 })
  }
}
