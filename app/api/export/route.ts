import { NextResponse } from "next/server"
import { neon } from "@neondatabase/serverless"

const sql = neon(process.env.DATABASE_URL!)

export async function POST(request: Request) {
  try {
    const { analysisId, format, includeScreenshot } = await request.json()

    if (!analysisId) {
      return NextResponse.json({ error: "Analysis ID is required" }, { status: 400 })
    }

    // Get the analysis data from database
    let analysis
    try {
      const result = await sql`
        SELECT * FROM website_analyzer.analyses 
        WHERE id = ${analysisId}
      `

      if (result.length === 0) {
        return NextResponse.json({ error: "Analysis not found" }, { status: 404 })
      }

      analysis = result[0]
    } catch (dbError) {
      console.error("Database error:", dbError)
      return NextResponse.json({ error: "Failed to fetch analysis" }, { status: 500 })
    }

    // Parse JSON fields
    const keyPoints =
      typeof analysis.key_points === "string" ? JSON.parse(analysis.key_points) : analysis.key_points || []
    const keywords = typeof analysis.keywords === "string" ? JSON.parse(analysis.keywords) : analysis.keywords || []
    const improvements =
      typeof analysis.improvements === "string" ? JSON.parse(analysis.improvements) : analysis.improvements || []
    const contentStats =
      typeof analysis.content_stats === "string" ? JSON.parse(analysis.content_stats) : analysis.content_stats || {}

    let content = ""
    const title = `Analysis of ${analysis.title}`

    switch (format) {
      case "markdown":
        content = `# ${title}

**Website:** ${analysis.url}  
**Analysis Date:** ${new Date(analysis.created_at).toLocaleDateString()}

## Summary
${analysis.summary}

## Key Findings
${keyPoints.map((point: string) => `- ${point}`).join("\n")}

## Performance Metrics
- **Sustainability Score:** ${analysis.sustainability_score}%
- **Performance:** ${analysis.performance_score}%
- **Script Optimization:** ${analysis.script_optimization_score}%
- **Content Quality:** ${analysis.content_quality_score}%

## Content Statistics
- **Word Count:** ${contentStats.wordCount || 0}
- **Paragraphs:** ${contentStats.paragraphs || 0}
- **Headings:** ${contentStats.headings || 0}
- **Images:** ${contentStats.images || 0}
- **Links:** ${contentStats.links || 0}

## Keywords
${keywords.join(", ")}

## Recommendations
${improvements.map((imp: string) => `- ${imp}`).join("\n")}

---
*Generated by DevSphere Website Analyzer*`
        break

      case "plain":
        content = `${title}

Website: ${analysis.url}
Analysis Date: ${new Date(analysis.created_at).toLocaleDateString()}

Summary:
${analysis.summary}

Key Findings:
${keyPoints.map((point: string) => `• ${point}`).join("\n")}

Performance Metrics:
• Sustainability Score: ${analysis.sustainability_score}%
• Performance: ${analysis.performance_score}%
• Script Optimization: ${analysis.script_optimization_score}%
• Content Quality: ${analysis.content_quality_score}%

Content Statistics:
• Word Count: ${contentStats.wordCount || 0}
• Paragraphs: ${contentStats.paragraphs || 0}
• Headings: ${contentStats.headings || 0}
• Images: ${contentStats.images || 0}
• Links: ${contentStats.links || 0}

Keywords: ${keywords.join(", ")}

Recommendations:
${improvements.map((imp: string) => `• ${imp}`).join("\n")}

Generated by DevSphere Website Analyzer`
        break

      case "pdf":
        content = `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
        h1 { color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 10px; }
        h2 { color: #4f46e5; margin-top: 30px; }
        .metric { background: #f8fafc; padding: 10px; margin: 5px 0; border-left: 4px solid #6366f1; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; }
        .stat-item { background: #f1f5f9; padding: 15px; text-align: center; border-radius: 5px; }
        .keywords { background: #ecfdf5; padding: 15px; border-radius: 5px; }
        ul { padding-left: 20px; }
        .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e2e8f0; font-size: 12px; color: #64748b; }
    </style>
</head>
<body>
    <h1>${title}</h1>
    
    <div class="metric">
        <strong>Website:</strong> ${analysis.url}<br>
        <strong>Analysis Date:</strong> ${new Date(analysis.created_at).toLocaleDateString()}
    </div>

    <h2>Summary</h2>
    <p>${analysis.summary}</p>

    <h2>Key Findings</h2>
    <ul>
        ${keyPoints.map((point: string) => `<li>${point}</li>`).join("")}
    </ul>

    <h2>Performance Metrics</h2>
    <div class="stats">
        <div class="stat-item">
            <strong>${analysis.sustainability_score}%</strong><br>
            Sustainability Score
        </div>
        <div class="stat-item">
            <strong>${analysis.performance_score}%</strong><br>
            Performance
        </div>
        <div class="stat-item">
            <strong>${analysis.script_optimization_score}%</strong><br>
            Script Optimization
        </div>
        <div class="stat-item">
            <strong>${analysis.content_quality_score}%</strong><br>
            Content Quality
        </div>
    </div>

    <h2>Content Statistics</h2>
    <div class="stats">
        <div class="stat-item">
            <strong>${contentStats.wordCount || 0}</strong><br>
            Words
        </div>
        <div class="stat-item">
            <strong>${contentStats.paragraphs || 0}</strong><br>
            Paragraphs
        </div>
        <div class="stat-item">
            <strong>${contentStats.headings || 0}</strong><br>
            Headings
        </div>
        <div class="stat-item">
            <strong>${contentStats.images || 0}</strong><br>
            Images
        </div>
        <div class="stat-item">
            <strong>${contentStats.links || 0}</strong><br>
            Links
        </div>
    </div>

    <h2>Keywords</h2>
    <div class="keywords">
        ${keywords.join(", ")}
    </div>

    <h2>Recommendations</h2>
    <ul>
        ${improvements.map((imp: string) => `<li>${imp}</li>`).join("")}
    </ul>

    <div class="footer">
        Generated by DevSphere Website Analyzer
    </div>
</body>
</html>`
        break

      default:
        content = analysis.summary
    }

    // Try to save export log
    try {
      await sql`
        INSERT INTO website_analyzer.exports 
        (analysis_id, export_format, created_at)
        VALUES (${analysisId}, ${format}, NOW())
      `
    } catch (logError) {
      console.error("Failed to log export:", logError)
      // Continue even if logging fails
    }

    return NextResponse.json({
      content,
      title,
      websiteTitle: analysis.title,
      websiteUrl: analysis.url,
      format,
    })
  } catch (error) {
    console.error("Export error:", error)
    return NextResponse.json(
      {
        error: "Failed to export content",
        message: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
